name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  # Stage 1: Code Quality and Security
  code-analysis:
    name: Code Analysis & Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Run Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Stage 2: Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: code-analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration Release --no-restore

    - name: Run unit tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          bin/Release/
          obj/Release/

  # Stage 3: Docker Build Test
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: odysseus-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name odysseus-test -p 8080:80 odysseus-test:latest
        sleep 10
        # Test if the application is responding
        curl -f http://localhost:8080 || exit 1
        docker stop odysseus-test

  # Stage 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run integration tests
      run: |
        # Placeholder for integration tests
        echo "Running integration tests..."
        # Add your integration test commands here
        # dotnet test IntegrationTests/ --configuration Release

  # Final Stage: CI Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-analysis, build-and-test, docker-build-test, integration-tests]
    if: always()

    steps:
    - name: CI Results
      run: |
        echo "üîç Code Analysis: ${{ needs.code-analysis.result }}"
        echo "üèóÔ∏è Build & Test: ${{ needs.build-and-test.result }}"
        echo "üê≥ Docker Build: ${{ needs.docker-build-test.result }}"
        echo "üß™ Integration: ${{ needs.integration-tests.result }}"

        if [[ "${{ needs.code-analysis.result }}" == "success" &&
              "${{ needs.build-and-test.result }}" == "success" &&
              "${{ needs.docker-build-test.result }}" == "success" &&
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "‚úÖ All CI stages passed successfully!"
        else
          echo "‚ùå One or more CI stages failed!"
          exit 1
        fi
