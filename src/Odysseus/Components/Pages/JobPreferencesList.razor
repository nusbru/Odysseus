@page "/job-preferences"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IMyJobPreferenceRepository JobPreferenceRepository
@inject IMyProfileRepository ProfileRepository
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Job Preferences - Odysseus</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-briefcase"></i> My Job Preferences
                </h1>
                <div>
                    <a href="/job-preferences/new" class="btn btn-primary me-2">
                        <i class="bi bi-plus-lg"></i> Add Preference
                    </a>
                    <a href="/profile" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Profile
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="row">
            <div class="col-12">
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading job preferences...</p>
                </div>
            </div>
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="row">
                <div class="col-12">
                    <div class="alert alert-danger" role="alert">
                        <i class="bi bi-exclamation-triangle"></i> @ErrorMessage
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="row">
                <div class="col-12">
                    <div class="alert alert-success" role="alert">
                        <i class="bi bi-check-circle"></i> @SuccessMessage
                    </div>
                </div>
            </div>
        }

        @if (UserProfile == null)
        {
            <div class="row">
                <div class="col-12">
                    <div class="alert alert-warning" role="alert">
                        <h5><i class="bi bi-exclamation-triangle"></i> No Profile Found</h5>
                        <p>You need to create a profile before managing job preferences.</p>
                        <a href="/profile" class="btn btn-primary">
                            <i class="bi bi-person-plus"></i> Create Profile
                        </a>
                    </div>
                </div>
            </div>
        }
        else if (JobPreferences.Any())
        {
            <!-- Filter and Sort Controls -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="row align-items-end">
                                <div class="col-md-3">
                                    <label for="workModelFilter" class="form-label">Work Model</label>
                                    <select @bind="SelectedWorkModel" @bind:after="ApplyFilters" class="form-select" id="workModelFilter">
                                        <option value="">All Work Models</option>
                                        @foreach (var option in MyJobPreferenceFormViewModel.WorkModelOptions)
                                        {
                                            <option value="@((int)option.Value)">@option.Text</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="contractFilter" class="form-label">Contract Type</label>
                                    <select @bind="SelectedContractType" @bind:after="ApplyFilters" class="form-select" id="contractFilter">
                                        <option value="">All Contract Types</option>
                                        @foreach (var option in MyJobPreferenceFormViewModel.ContractTypeOptions)
                                        {
                                            <option value="@((int)option.Value)">@option.Text</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="sortBy" class="form-label">Sort By</label>
                                    <select @bind="SortBy" @bind:after="ApplyFilters" class="form-select" id="sortBy">
                                        <option value="title">Title</option>
                                        <option value="created">Date Created</option>
                                        <option value="updated">Last Updated</option>
                                        <option value="compensation">Compensation</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <div class="d-flex align-items-center">
                                        <button type="button" @onclick="ClearFilters" class="btn btn-outline-secondary me-2">
                                            <i class="bi bi-x-lg"></i> Clear
                                        </button>
                                        <small class="text-muted">@FilteredJobPreferences.Count() of @JobPreferences.Count</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Job Preferences Grid -->
            <div class="row">
                @foreach (var preference in FilteredJobPreferences)
                {
                    <div class="col-lg-6 col-xl-4 mb-4">
                        <div class="card h-100 shadow-sm">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="card-title mb-0">@preference.Title</h6>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="/job-preferences/@preference.Id">
                                            <i class="bi bi-eye"></i> View
                                        </a></li>
                                        <li><a class="dropdown-item" href="/job-preferences/@preference.Id/edit">
                                            <i class="bi bi-pencil"></i> Edit
                                        </a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><button class="dropdown-item text-danger" @onclick="() => DeletePreference(preference.Id)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-12">
                                        <p class="card-text">
                                            <span class="badge bg-primary me-2">@preference.WorkModelText</span>
                                            <span class="badge bg-secondary">@preference.ContractText</span>
                                        </p>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-6">
                                        <small class="text-muted d-block">Relocation</small>
                                        <span class="@(preference.OfferRelocation ? "text-success" : "text-muted")">
                                            <i class="bi @(preference.OfferRelocation ? "bi-check-lg" : "bi-x-lg")"></i>
                                            @preference.RelocationText
                                        </span>
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted d-block">Sponsorship</small>
                                        <span class="@(preference.OfferSponsorship ? "text-success" : "text-muted")">
                                            <i class="bi @(preference.OfferSponsorship ? "bi-check-lg" : "bi-x-lg")"></i>
                                            @preference.SponsorshipText
                                        </span>
                                    </div>
                                </div>

                                @if (preference.TotalCompensation.HasValue)
                                {
                                    <div class="row mt-2">
                                        <div class="col-12">
                                            <small class="text-muted d-block">Compensation</small>
                                            <strong class="text-success">@preference.CompensationText</strong>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(preference.Notes))
                                {
                                    <div class="row mt-2">
                                        <div class="col-12">
                                            <small class="text-muted d-block">Notes</small>
                                            <p class="text-muted small mb-0">
                                                @(preference.Notes.Length > 100 ? preference.Notes.Substring(0, 100) + "..." : preference.Notes)
                                            </p>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="card-footer text-muted">
                                <small>
                                    Created: @preference.CreatedAt.ToString("MMM dd, yyyy")
                                    @if (preference.UpdatedAt != preference.CreatedAt)
                                    {
                                        <br />
                                        <text>Updated: @preference.UpdatedAt.ToString("MMM dd, yyyy")</text>
                                    }
                                </small>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (FilteredJobPreferences.Count() == 0)
            {
                <div class="row">
                    <div class="col-12">
                        <div class="text-center py-5">
                            <i class="bi bi-funnel display-1 text-muted"></i>
                            <h4 class="mt-3">No preferences match your filters</h4>
                            <p class="text-muted">Try adjusting your filter criteria</p>
                            <button type="button" @onclick="ClearFilters" class="btn btn-outline-primary">
                                <i class="bi bi-x-lg me-2"></i> Clear Filters
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row">
                <div class="col-12">
                    <div class="text-center py-5">
                        <i class="bi bi-briefcase display-1 text-muted"></i>
                        <h4 class="mt-3">No job preferences yet</h4>
                        <p class="text-muted">Create your first job preference to get started</p>
                        <a href="/job-preferences/new" class="btn btn-primary">
                            <i class="bi bi-plus-lg me-2"></i> Add Your First Preference
                        </a>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<MyJobPreferenceViewModel> JobPreferences { get; set; } = new();
    private IEnumerable<MyJobPreferenceViewModel> FilteredJobPreferences => ApplyFiltersAndSort();
    private MyProfile? UserProfile { get; set; }
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }
    private bool IsLoading { get; set; } = true;

    // Filter and Sort Properties
    private string SelectedWorkModel { get; set; } = "";
    private string SelectedContractType { get; set; } = "";
    private string SortBy { get; set; } = "title";

    [Parameter, SupplyParameterFromQuery] public string? Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        // Handle success messages from query string
        if (!string.IsNullOrEmpty(Message))
        {
            SuccessMessage = Message switch
            {
                "created" => "Job preference created successfully!",
                "updated" => "Job preference updated successfully!",
                "deleted" => "Job preference deleted successfully!",
                _ => null
            };
        }

        IsLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authenticationState.User);
            if (user?.Id == null) return;

            // Load user profile
            UserProfile = await ProfileRepository.GetByUserIdAsync(user.Id);

            if (UserProfile != null)
            {
                // Load job preferences
                var preferences = await JobPreferenceRepository.GetByUserIdAsync(user.Id);
                JobPreferences = preferences.Select(p => p.ToViewModel()).ToList();
            }
        }
        catch
        {
            ErrorMessage = "Failed to load job preferences. Please try again.";
        }
    }

    private IEnumerable<MyJobPreferenceViewModel> ApplyFiltersAndSort()
    {
        var filtered = JobPreferences.AsEnumerable();

        // Apply work model filter
        if (!string.IsNullOrEmpty(SelectedWorkModel) && int.TryParse(SelectedWorkModel, out int workModelInt))
        {
            filtered = filtered.Where(p => (int)p.WorkModel == workModelInt);
        }

        // Apply contract type filter
        if (!string.IsNullOrEmpty(SelectedContractType) && int.TryParse(SelectedContractType, out int contractInt))
        {
            filtered = filtered.Where(p => (int)p.Contract == contractInt);
        }

        // Apply sorting
        filtered = SortBy switch
        {
            "created" => filtered.OrderByDescending(p => p.CreatedAt),
            "updated" => filtered.OrderByDescending(p => p.UpdatedAt),
            "compensation" => filtered.OrderByDescending(p => p.TotalCompensation ?? 0),
            _ => filtered.OrderBy(p => p.Title)
        };

        return filtered;
    }

    private void ApplyFilters()
    {
        // This method is called when filter dropdowns change
        // The filtering is handled by the FilteredJobPreferences property
        StateHasChanged();
    }

    private void ClearFilters()
    {
        SelectedWorkModel = "";
        SelectedContractType = "";
        SortBy = "title";
        StateHasChanged();
    }

    private async Task DeletePreference(int preferenceId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this job preference?");
            if (!confirmed) return;

            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authenticationState.User);
            if (user?.Id == null) return;

            var success = await JobPreferenceRepository.DeleteAsync(preferenceId, user.Id);
            if (success)
            {
                SuccessMessage = "Job preference deleted successfully!";
                await LoadData();
            }
            else
            {
                ErrorMessage = "Failed to delete job preference. Please try again.";
            }
        }
        catch
        {
            ErrorMessage = "An error occurred while deleting the job preference.";
        }
    }
}
